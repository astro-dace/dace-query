import pytest

from dace_query import DaceClass
from dace_query.exoplanet import ExoplanetClass


@pytest.mark.parametrize("instance", [pytest.param("anon_dace_instance")])
def test_exoplanets_query_database_keys(instance, request):
    dace_instance: DaceClass = request.getfixturevalue(instance)
    instance = ExoplanetClass(dace_instance=dace_instance)

    results = instance.query_database(limit=10, output_format="dict")

    expected_keys = [
        "obj_id_catname",
        "db_info_name",
        "pub_info_reference",
        "obj_orb_period_day",
        "obj_phys_mass_mjup",
        "obj_phys_radius_rjup",
        "obj_phys_mass_rel_unc",
        "obj_phys_radius_rel_unc",
        "obj_orb_period_day_errmax",
        "obj_orb_period_day_errmin",
        "obj_phys_mass_mjup_errmax",
        "obj_phys_mass_mjup_errmin",
        "obj_phys_radius_rjup_errmax",
        "obj_phys_radius_rjup_errmin",
        "pub_info_discovered_year",
        "sys_nplanets",
        "obj_id_pletter",
        "obj_id_parent_name",
        "obj_id_tic",
        "obj_id_gaiadr3",
        "pub_info_detectiontype",
        "pub_info_disc_facility",
        "sys_nstars",
        "pub_ads_link",
        "pub_info_updated",
        "obj_orb_a_au",
        "obj_orb_a_au_errmax",
        "obj_orb_a_au_errmin",
        "obj_orb_a_au_ref",
        "obj_orb_ecc",
        "obj_orb_ecc_errmax",
        "obj_orb_ecc_errmin",
        "obj_orb_ecc_flag",
        "obj_orb_inc_deg",
        "obj_orb_inc_deg_errmax",
        "obj_orb_inc_deg_errmin",
        "obj_orb_tperi_day",
        "obj_orb_tperi_day_errmax",
        "obj_orb_tperi_day_errmin",
        "obj_orb_omega_deg",
        "obj_orb_omega_deg_errmax",
        "obj_orb_omega_deg_errmin",
        "obj_orb_trandur_hour",
        "obj_orb_trandur_hour_errmax",
        "obj_orb_trandur_hour_errmin",
        "obj_orb_tranmid_day",
        "obj_orb_tranmid_day_errmax",
        "obj_orb_tranmid_day_errmin",
        "obj_phys_msini_mjup",
        "obj_phys_msini_mjup_errmax",
        "obj_phys_msini_mjup_errmin",
        "obj_insolation_earthfl",
        "obj_insolation_earthfl_errmax",
        "obj_insolation_earthfl_errmin",
        "obj_phys_eq_temp_k",
        "obj_phys_eq_temp_k_errmax",
        "obj_phys_eq_temp_k_errmin",
        "obj_phys_lambda_deg",
        "obj_phys_lambda_deg_errmax",
        "obj_phys_lambda_deg_errmin",
        "obj_phys_lambda_deg_ref",
        "obj_phys_b",
        "obj_phys_b_errmax",
        "obj_phys_b_errmin",
        "obj_phys_b_ref",
        "obj_phys_trandep",
        "obj_phys_trandep_errmax",
        "obj_phys_trandep_errmin",
        "obj_phys_trandep_ref",
        "obj_orb_k_mps",
        "obj_orb_k_mps_errmax",
        "obj_orb_k_mps_errmin",
        "obj_stellar_spectype",
        "obj_parent_phys_teff_k",
        "obj_parent_phys_teff_k_errmax",
        "obj_parent_phys_teff_k_errmin",
        "obj_parent_phys_radius_rsun",
        "obj_parent_phys_radius_rsun_errmax",
        "obj_parent_phys_radius_rsun_errmin",
        "obj_parent_phys_mass_msun",
        "obj_parent_phys_mass_msun_errmax",
        "obj_parent_phys_mass_msun_errmin",
        "obj_parent_phys_met",
        "obj_parent_phys_met_errmax",
        "obj_parent_phys_met_errmin",
        "obj_parent_phys_met_ratio",
        "obj_parent_phys_lum_lsun",
        "obj_parent_phys_lum_lsun_errmax",
        "obj_parent_phys_lum_lsun_errmin",
        "obj_parent_phys_logg",
        "obj_parent_phys_logg_errmax",
        "obj_parent_phys_logg_errmin",
        "obj_parent_age_gyr",
        "obj_parent_age_gyr_errmax",
        "obj_parent_age_gyr_errmin",
        "obj_parent_mv",
        "obj_parent_mv_errmax",
        "obj_parent_mv_errmin",
        "obj_pos_alpha_deg",
        "obj_pos_alpha_deg_err",
        "obj_pos_delta_deg",
        "obj_pos_delta_deg_err",
        "obj_orb_stardistance_pc",
        "obj_orb_stardistance_pc_errmax",
        "obj_orb_stardistance_pc_errmin",
        "obj_pos_parallax_mas",
        "obj_pos_parallax_mas_err",
        "obj_parent_rd_kms",
        "obj_parent_rv_kms_err",
        "obj_parent_gaia_teff_k",
        "obj_parent_gaia_teff_k_errmax",
        "obj_parent_gaia_teff_k_errmin",
        "obj_parent_gaia_feh",
        "obj_parent_gaia_feh_errmax",
        "obj_parent_gaia_feh_errmin",
        "obj_parent_gaia_lum_lsun",
        "obj_parent_gaia_lum_lsun_errmax",
        "obj_parent_gaia_lum_lsun_errmin",
        "obj_parent_gaia_logg",
        "obj_parent_gaia_logg_errmax",
        "obj_parent_gaia_logg_errmin",
        "obj_parent_gaia_age_gyr",
        "obj_parent_gaia_age_gyr_errmax",
        "obj_parent_gaia_age_gyr_errmin",
        "obj_comput_k_mps",
        "obj_phys_density_gpcm3",
        "obj_phys_density_gpcm3_errmax",
        "obj_phys_density_gpcm3_errmin",
        "obj_comput_insolation_earthfl",
        "obj_comput_insolation_earthfl_errmax",
        "obj_comput_insolation_earthfl_errmin",
        "obj_comput_teq_k",
        "obj_comput_teq_k_errmax",
        "obj_comput_teq_k_errmin",
    ]

    assert all(key in results.keys() for key in expected_keys)


@pytest.mark.parametrize(
    "instance, target",
    [
        pytest.param("anon_dace_instance", "L 98-59 c"),
        pytest.param("anon_dace_instance", "TOI-905 b"),
        pytest.param("anon_dace_instance", "unknown_target", marks=pytest.mark.xfail),
    ],
)
def test_exoplanet_query_database_specific_targets(
    instance, target, request: pytest.FixtureRequest
):
    dace_instance: DaceClass = request.getfixturevalue(instance)
    instance = ExoplanetClass(dace_instance=dace_instance)

    filters: dict = {"obj_id_catname": {"equal": [target]}}
    results = instance.query_database(filters=filters, limit=10, output_format="dict")
    assert results
    assert all((target == obj) for obj in results["obj_id_catname"])
